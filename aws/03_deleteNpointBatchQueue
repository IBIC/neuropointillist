#!/usr/bin/env python

import boto3
import botocore
import json
import time
import os
import base64
import docker
import sys
import subprocess
import getpass
from botocore.exceptions import ClientError


ecr = boto3.client('ecr')
cfn = boto3.client('cloudformation')
ec2_client = boto3.client('ec2')
batch = boto3.client('batch')
iam = boto3.client('iam')
ssm = boto3.client('ssm')
s3 = boto3.client('s3')

session = boto3.session.Session()
region = session.region_name
account_id = boto3.client('sts').get_caller_identity().get('Account')


prefix='npoint'
username = getpass.getuser()
suffix='_' + username

batch_sec_group_name = prefix + '_security_user' + suffix
instance_profile_name = prefix + '_instance_profile' + suffix
default_env = prefix + '_compute_environment' + suffix
batch_queue_name = prefix + '_batch_queue' + suffix
role_name=prefix + 'ecs-s3-access-2234' + suffix
policy_name= prefix + "_permissionsPolicyForEC2" + suffix





def delete_compute_environment(computeEnvironment):
    try:
        response = batch.update_compute_environment(
        computeEnvironment=computeEnvironment,
        state='DISABLED',
        )
    except ClientError as e:
        print("Compute environment " + computeEnvironment +" has probably been deleted")
        return None

    while True:
        response = batch.describe_compute_environments(
            computeEnvironments=[computeEnvironment])
        assert len(response['computeEnvironments']) == 1
        env = response['computeEnvironments'][0]
        state = env['state']
        status = env['status']
        if status == 'UPDATING':
            print("Environment %r is updating, waiting..." % (computeEnvironment,))
        elif state == 'DISABLED':
            break
        else:
            raise RuntimeError('Expected status=UPDATING or state=DISABLED, '
                               'but status=%r and state=%r' % (status, state))

        # wait a little bit before checking again.                              
        time.sleep(5)

    try:
        response = batch.delete_compute_environment(
            computeEnvironment=computeEnvironment
        )
    except ClientError as e:
        print(e)

    return response






def describe_compute_environments(compute_envs):
    try:
        response = batch.describe_compute_environments(
            computeEnvironments=compute_envs,
        )
    except ClientError as e:
        print("Batch environment has probably been deleted.")

    return response



def delete_job_queue(job_queue):
    job_queues = [job_queue]
    response = describe_job_queues(job_queues)
    if not response:
        print("Job queue " + job_queue + " may already have been deleted.")
        return response
    
    if response['jobQueues'][0]['state'] != 'DISABLED':
        try:
            batch.update_job_queue(
                jobQueue=job_queue,
                state='DISABLED'
            )
        except ClientError as e:
            print(e.response['Error']['Message'])
            raise

    terminate_jobs(job_queue)

    # Wait until job queue is DISABLED                                          
    response = describe_job_queues(job_queues)

    while response['jobQueues'][0]['state'] != 'DISABLED':
        time.sleep(5)
        response = describe_job_queues(job_queues)

    time.sleep(10)
    if response['jobQueues'][0]['status'] != 'DELETING':
        try:
            batch.delete_job_queue(
                jobQueue=job_queue,
            )
        except ClientError as e:
            print(e.response['Error']['Message'])
            raise

    response = describe_job_queues(job_queues)

    while response['jobQueues'][0]['status'] == 'DELETING':
        time.sleep(5)
        response = describe_job_queues(job_queues)

        if len(response['jobQueues']) != 1:
            break


def describe_job_queues(job_queues):
    try:
        response = batch.describe_job_queues(
            jobQueues=job_queues
        )
    except ClientError as e:
        print(e.response['Error']['Message'])
        raise

    return response

def terminate_jobs(job_queue):
    response = list_jobs(job_queue)
    for job in response['jobSummaryList']:
        batch.terminate_job(
            jobId =job['jobId'],
            reason='Removing Batch Environment'
        )
    while response.get('nextToken', None) is not None:
        response = list_jobs(job_queue, response['nextToken'])
        for job in response['jobSummaryList']:
            batch.terminate_job(
                jobId =job['jobId'],
                reason='Removing Batch Environment'
            )


def list_jobs(job_queue, next_token=""):
    try:
        if next_token:
            response = batch.list_jobs(
                jobQueue=job_queue,
                nextToken=next_token
            )
        else:
            response = batch.list_jobs(
                jobQueue=job_queue,
            )
    except ClientError as e:
        print(e.response['Error']['Message'])
        raise

    return response



print("Deleting batch queue: "+ batch_queue_name + "... this might take some time")
resp = delete_job_queue(batch_queue_name)    



print("Delting compute environment: "+ default_env + "... this might take some time")
resp = delete_compute_environment(default_env)



print("Deleting security group: " + batch_sec_group_name)
try:
    sg = ec2_client.describe_security_groups(
        GroupNames=[
            batch_sec_group_name,
        ]
    )
    batch_sec_group_id=sg['SecurityGroups'][0]['GroupId']
    response = ec2_client.delete_security_group(GroupId=batch_sec_group_id)
    print("Removing role from instance profile:")
except ClientError as e:
       if(e.response['Error']['Code']=='InvalidGroup.NotFound'):
            print("Instance profile name "+instance_profile_name +" does not exist (probably already deleted)")
       else:
            print("Unexpected error creating instance profile: " + e.response['Error']['Code'])
        

try:
    response = iam.remove_role_from_instance_profile(
        InstanceProfileName=instance_profile_name,
        RoleName='ecsInstanceRole'
    )
except ClientError as e:
       if(e.response['Error']['Code']=='NoSuchEntity'):
            print("IAM user "+instance_profile_name +" does not exist (probably already deleted)")
       else:
            print("Unexpected error removing role from instance profile: " + e.response['Error']['Code'])



try:
    response = iam.delete_instance_profile(
        InstanceProfileName=instance_profile_name
    )
except ClientError as e:
       if(e.response['Error']['Code']=='NoSuchEntity'):
            print("IAM user "+instance_profile_name +" does not exist (probably already deleted)")
       else:
            print("Unexpected error deleting instance profile: " + e.response['Error']['Code'])


# Give information for cleaning up bucket
print("To delete your bucket (replace yourbucketname with the actual bucket name) ")
print("when you have removed everything that you need, use the command:")
print("aws s3 rb s3://yourbucketname --force")

# Give information for cleaning up repository
print("To clean up your Elastic Container Registry when done, use the command:")
print("aws ecr delete-repository --force --repository-name neuropointillist-nextflow")

